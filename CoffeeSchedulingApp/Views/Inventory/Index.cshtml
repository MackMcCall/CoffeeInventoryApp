@using CoffeeSchedulingApp.Models.CoffeeModelsRepos;
@using CoffeeSchedulingApp.Models.InventoryModelsRepos;
@using CoffeeSchedulingApp.Models.UserModelsRepos;
@model InventoryViewModel;


<h2>Your Coffees</h2>
<table class="table">
    <tr>
        <th>CoffeeID</th>
        <th>Roaster</th>
        <th>Producer</th>
        <th>Country</th>
        <th>Region</th>
        <th>Variety</th>
        <th>Process</th>
        <th>Roast Date</th>
        <th>Days Rest Needed</th>
        <th>Ready To Drink</th>
        <th>Grams</th>
        <th>Archived</th>
    </tr>

    @{
        bool anyCoffeesNotArchived = false;
        decimal totalGrams = 0;
        int totalDaysRest = 0;
        decimal daysWorthOfCoffee = 0;
        int numberOfCoffees = 0;
    }

    @foreach (var coffee in @Model.ModelCoffees)
    {
        <tr>
            <td><a href=/Coffee/ViewCoffee/@coffee.CoffeeID>@coffee.CoffeeID</a></td>
            <td>@coffee.Roaster</td>
            <td>@coffee.Producer</td>
            <td>@coffee.Country</td>
            <td>@coffee.Region</td>
            <td>@coffee.Variety</td>
            <td>@coffee.Process</td>
            <td>@coffee.RoastDate.ToString("MM/d")</td>
            <td>@coffee.DaysRestNeeded</td>
            <td>@(@coffee.ReadyToDrink == true ? "Yes" : "No")</td>
            <td>@coffee.Grams</td>
            <td>@(@coffee.IsArchived == true ? "Yes" : "No")</td>
        </tr>

        @if (coffee.IsArchived == false)
        {
            totalGrams += coffee.Grams;
            totalDaysRest += coffee.DaysRestNeeded;
            numberOfCoffees++;
            anyCoffeesNotArchived = true;
        }

    }
</table>


<div style="display: block">
    <a href="/Coffee/InsertCoffee/" class="btn btn-primary">Enter a New Coffee</a>
</div>

@{
    DateTime runOutOfCoffeeDay;
    DateTime buyCoffeeDay = System.DateTime.Now;
}

@{
    if (anyCoffeesNotArchived)
    {
        daysWorthOfCoffee = totalGrams / Model.ModelUser.AvgGramsPerDay;
    }
    else
    {
        daysWorthOfCoffee = 0;
    }
}

<h4>
    Total Coffee Left: @Math.Round(totalGrams)g
</h4>

<h4>
    Average Coffee Used per Day: @(Model.ModelUser.AvgGramsPerDay)g
    <a href="/User/UpdateUserAvgGramsPerDay/@Model.ModelUser.UserID" class="btn btn-primary">Update Usage Rate</a>
</h4>

<h4>
    Days of Coffee Left: @Math.Round(daysWorthOfCoffee) days
</h4>

@{
    runOutOfCoffeeDay = DateTime.Today.AddDays(Convert.ToInt32(daysWorthOfCoffee));
}

<h4>
    You Will Run Out of Coffee On: @runOutOfCoffeeDay.ToString("MM/d")
</h4>

@{
    if (anyCoffeesNotArchived)
    {
        buyCoffeeDay = runOutOfCoffeeDay.AddDays(-(totalDaysRest / numberOfCoffees));
    }
}

<h4>
    To Have Rested Coffee, Buy More On: @buyCoffeeDay.ToString("MM/d")
</h4>